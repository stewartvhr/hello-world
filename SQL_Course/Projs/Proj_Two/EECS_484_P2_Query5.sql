CREATE VIEW Possible_Friends AS
SELECT DISTINCT TOP LEAST(U1.USER_ID, U2.USER_ID) AS UID1, GREATEST(U1.USER_ID, U2.USER_ID) AS UID2, T1.TAG_PHOTO_ID, U1.First_Name, U1.Last_Name, U2.First_Name, U2.Last_Name,
FROM jiaqni.PUBLIC_USERS U1, jiaqni.PUBLIC_USERS U2, jiaqni.PUBLIC_TAGS T1, jiaqni.PUBLIC_TAGS T2
WHERE U1.USER_ID <> U2.USER_ID AND U1.GENDER = U2.GENDER AND U1.USER_ID = T1.SUBJECT_ID AND U2.USER_ID = T2.SUBJECT_ID
        AND T1.TAG_PHOTO_ID = T2.TAG_PHOTO_ID AND (U1.USER_ID, U2.USER_ID) NOT IN (SELECT * FROM Friends) AND
        (U1.BIRTH_YEAR - U2.BIRTH_YEAR <= YEAR_DIFF)
ORDER BY COUNT DISTINCT(T1.TAG_PHOTO_ID) DESC, UID1 ASC, UID2 ASC
LIMIT 5;

CREATE VIEW Possible_Friends_Photos_IDS AS
SELECT TAG_PHOTO_ID FROM Possible_Friends;

SELECT Possible_Friends_Photos_IDS.TAG_PHOTO_ID, P.PHOTO_LINK, P.ALBUM_ID, A.ALBUM_NAME
FROM Albums A, Photos P, Possible_Friends_Photos_IDS
WHERE A.ALBUM_ID = P.ALBUM_ID AND P.PHOTO_ID = Possible_Friends_Photos_IDS.TAG_PHOTO_ID
ORDER BY Possible_Friends_Photos_IDS.TAG_PHOTO_ID ASC;

DROP VIEW Possible_Friends;
DROP VIEW Possible_Friends_Photos_IDS;
